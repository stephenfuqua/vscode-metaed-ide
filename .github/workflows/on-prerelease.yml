# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: On Pre-Release
on:
  release:
    types:
      - prereleased

env:
  GITHUB_TOKEN: ${{ secrets.PAT_ATTACH_TO_RELEASE }}
  MANIFEST_FILE: "manifest.spdx.json"
  PACKAGE_NAME: "vscode-metaed-ide"
  REF: ${{ github.ref_name }}

jobs:
  package:
    name: Build VSIX Package
    runs-on: ubuntu-latest
    outputs:
      hash-code: ${{ steps.hash-code.outputs.hash-code }}
      sbom-hash-code: ${{ steps.sbom-hash-code.outputs.sbom-hash-code }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Node modules cache
        id: modules-cache
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 #v4.0.1
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.modules-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Build Typescript
        run: npm run build

      - name: Install vsce
        run: npm install --global @vscode/vsce

      - name: Build vsix package
        run: |
          npm run package:clean
          npm run package:vsce

      - name: Generate hash code for VSIX file
        id: hash-code
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          hash=$(sha256sum ./extension/vscode-metaed.vsix | awk '{split($0,a); print a[1]}')
          echo "hash-code=$hash" >> $GITHUB_OUTPUT

      - name: Upload vsix package
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: vscode-metaed.vsix
          path: extension/vscode-metaed.vsix
          retention-days: 1

      # Handling SBOM differently for npm than for NuGet packages, because we need to 
      # build the SBOM from the `dist` folder.
      - name: Build a Software Bill of Materials
        shell: pwsh
        run: |
          $version = (npm version | ConvertFrom-Json).'vscode-metaed-ide'

          dotnet tool install --global Microsoft.Sbom.DotNetTool

          sbom-tool generate -b dist -bc . -pn vscode-metaed-ide -pv $version -ps "Ed-Fi Alliance, LLC" -nsb https://ed-fi.org

          cp ./dist/_manifest/spdx_2.2/manifest.spdx.* .

      - name: Upload SBOM
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ env.PACKAGE_NAME }}-SBOM
          path: ${{ env.MANIFEST_FILE }}
          if-no-files-found: error
          retention-days: 30

      - name: Generate hash code for SBOM
        id: sbom-hash-code
        shell: bash
        run: |          
          sbom_hash=$(cat ${{ env.MANIFEST_FILE }}.sha256)
          echo "sbom-hash-code=$sbom_hash"
          echo "sbom-hash-code=$sbom_hash" >> $GITHUB_OUTPUT

  packages-attach:
    name: Attach Package to Release
    runs-on: ubuntu-latest
    needs: package
    permissions:
      actions: read
      contents: write
    steps:
      - name: Securely retrieve the package from artifacts
        uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/actions/secure-download-artifact@main
        with:
          name: vscode-metaed.vsix
          path: vscode-metaed.vsix
          sha256: "${{ needs.package.outputs.hash-code }}"

#       - name: Attach to release
#         shell: pwsh
#         run: |
#           $release = "${{ github.ref_name }}"
#           $repo = "${{ github.repository }}"
#           $token = "${{ env.GITHUB_TOKEN }}"
#           $uploadName = "vscode-metaed.vsix"

#           $url = "https://api.github.com/repos/$repo/releases/tags/$release"

#           $gh_headers = @{
#               "Accept"        = "application/vnd.github+json"
#               "Authorization" = "Bearer $token"
#           }

#           $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
#           $releaseId = $response.id

#           $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

#           $gh_headers["Content-Type"] = "application/octet"
#           Invoke-RestMethod -Method POST `
#               -Uri "$($url)?name=$($uploadName)" `
#               -Headers $gh_headers `
#               -InFile $uploadName

      - name: Attach to release
        shell: bash
        run: |
          release="${{ github.ref_name }}"
          repo="${{ github.repository }}"
          token="${{ env.GITHUB_TOKEN }}"
          uploadName="vscode-metaed.vsix"

          url="https://api.github.com/repos/$repo/releases/tags/$release"

          response=(curl -H "Authorization: Bearer $token" -H "Accept: application/vnd.github+json" -X GET $url)

          releaseId=($response | jq '.id')

          url="https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

          curl -H "Content-Type: application/octet" \
               -H "Authorization: Bearer $token" \
               -H "Accept: application/vnd.github+json" \
               -X $url \
               --data-binary "@$($uploadName)"


  sbom-attach:
    name: Attach SBOM file
    runs-on: ubuntu-latest
    needs: package
    permissions:
      actions: read
      contents: write
    steps:
      - name: Download the SBOM
        uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/actions/secure-download-artifact@main
        with:
          name: "${{ env.PACKAGE_NAME }}-SBOM"
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.package.outputs.sbom-hash-code }}"

      - name: Attach to release
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $file = "${{ env.MANIFEST_FILE }}"
          $uploadName = "${{ env.PACKAGE_NAME }}-SBOM.zip"

          $url = "https://api.github.com/repos/$repo/releases/tags/$release"

          $gh_headers = @{
              "Accept"        = "application/vnd.github+json"
              "Authorization" = "Bearer $token"
          }

          $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
          $releaseId = $response.id

          $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

          Compress-Archive $file -DestinationPath $uploadName

          $gh_headers["Content-Type"] = "application/octet"
          Invoke-RestMethod -Method POST `
              -Uri "$($url)?name=$($uploadName)" `
              -Headers $gh_headers `
              -InFile $uploadName